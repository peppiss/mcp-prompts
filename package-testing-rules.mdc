---
description: Comprehensive testing guidelines for the MCP-Prompts package
globs: ["test/**/*.{ts,js}", "src/**/*.test.{ts,js}", "jest.config.js", "vitest.config.ts"]
---

# MCP-Prompts Package Testing Rules

## Testing Principles

1. Test all public APIs and interfaces
2. Focus on behavior, not implementation details
3. Test both success and failure cases
4. Maintain high code coverage (aim for >80%)
5. Tests should be isolated, deterministic, and fast

## Unit Testing Requirements

Each storage adapter MUST have comprehensive unit tests:

```typescript
describe('PostgresAdapter', () => {
  beforeEach(() => {
    // Set up test database
  });

  afterEach(() => {
    // Clean up test database
  });

  test('should connect successfully', async () => {
    const adapter = new PostgresAdapter(config);
    await expect(adapter.connect()).resolves.not.toThrow();
    expect(adapter.isConnected()).toBe(true);
  });

  test('should handle connection errors', async () => {
    const adapter = new PostgresAdapter({...config, host: 'invalid-host'});
    await expect(adapter.connect()).rejects.toThrow();
    expect(adapter.isConnected()).toBe(false);
  });
});
```

## Integration Testing Requirements

Integration tests must verify different storage options work together:

```typescript
describe('MCP-Prompts Integration', () => {
  test('should save and retrieve prompts using file adapter', async () => {
    // Test code
  });

  test('should save and retrieve prompts using postgres adapter', async () => {
    // Test code
  });

  test('should save and retrieve prompts using mdc adapter', async () => {
    // Test code
  });
});
```

## Performance Testing

For critical operations, include performance benchmarks:

```typescript
test('should retrieve 1000 prompts in under 100ms', async () => {
  const start = performance.now();
  await adapter.listPrompts();
  const duration = performance.now() - start;
  expect(duration).toBeLessThan(100);
});
```

## E2E Testing Procedure

1. Install the package globally
2. Run with default configuration
3. Validate expected output and behavior
4. Test all CLI commands
5. Test with PostgreSQL configuration

```bash
# E2E test script
npm install -g @sparesparrow/mcp-prompts
mkdir test-prompts
cd test-prompts
echo "STORAGE_TYPE=file" > .env
mcp-prompts --version
mcp-prompts list
mcp-prompts add --name "Test Prompt" --content "Hello, world!"
mcp-prompts get --id "test-prompt"
```

## Test Coverage Requirements

- Statements: >80%
- Branches: >75%
- Functions: >90%
- Lines: >80%

## Testing Common Failure Modes

Always test these common failure scenarios:

1. Database connection failures
2. File permission issues
3. Invalid input parameters
4. Concurrent operations
5. Rate limiting and throttling
6. Resource cleanup after errors

## Pre-release Testing Checklist

Before merging to main branch:

- [ ] All unit tests pass
- [ ] All integration tests pass
- [ ] Test coverage meets requirements
- [ ] Performance benchmarks pass
- [ ] E2E tests pass in clean environment
- [ ] Tests run successfully on all supported Node.js versions
- [ ] PostgreSQL adapter tests pass with actual PostgreSQL instance 