---
description: Environment configuration updates for MDC adapter support
globs: [".env*", "src/config.ts", "src/interfaces/config.ts"]
---

# Environment Configuration for MDC Support

## Adding MDC Support to Configuration Files

When implementing the MDC adapter, the environment configuration files need to be updated to support the new storage type. Here's how to update the `.env.example` file to include MDC support:

```dotenv
# Storage Configuration
# Options: file, postgres, mdc
STORAGE_TYPE=file

# File Storage Configuration
PROMPTS_DIR=./prompts
BACKUPS_DIR=./backups

# Server Configuration
LOG_LEVEL=info
HTTP_SERVER=false
PORT=3003
HOST=0.0.0.0

# PostgreSQL Configuration
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DATABASE=mcp_prompts
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_SSL=false
# Alternative: POSTGRES_CONNECTION_STRING=postgresql://postgres:postgres@localhost:5432/mcp_prompts

# MDC Adapter Configuration
MDC_RULES_DIR=./.cursor/rules
```

## TypeScript Config Interface Update

Update the config interface in `src/interfaces/config.ts` to include MDC-specific options:

```typescript
export interface Config {
  // Storage configuration
  STORAGE_TYPE: 'file' | 'postgres' | 'mdc';
  
  // File storage options
  PROMPTS_DIR?: string;
  BACKUPS_DIR?: string;
  
  // PostgreSQL options
  POSTGRES_CONNECTION_STRING?: string;
  POSTGRES_HOST?: string;
  POSTGRES_PORT?: string | number;
  POSTGRES_DATABASE?: string;
  POSTGRES_USER?: string;
  POSTGRES_PASSWORD?: string;
  POSTGRES_SSL?: string | boolean;
  
  // MDC options
  MDC_RULES_DIR?: string;
  
  // Server options
  LOG_LEVEL?: string;
  HTTP_SERVER?: string | boolean;
  PORT?: string | number;
  HOST?: string;
}
```

## Config Validation Update

Update the config validation in `src/config.ts` to handle MDC configuration:

```typescript
function validateConfig(config: Partial<Config>): Config {
  // Required fields
  if (!config.STORAGE_TYPE) {
    config.STORAGE_TYPE = 'file';
  }
  
  // Validate storage type
  if (!['file', 'postgres', 'mdc'].includes(config.STORAGE_TYPE)) {
    throw new Error(`Unsupported storage type: ${config.STORAGE_TYPE}`);
  }
  
  // File storage defaults
  if (config.STORAGE_TYPE === 'file') {
    if (!config.PROMPTS_DIR) config.PROMPTS_DIR = './prompts';
    if (!config.BACKUPS_DIR) config.BACKUPS_DIR = './backups';
  }
  
  // PostgreSQL validation
  if (config.STORAGE_TYPE === 'postgres') {
    if (!config.POSTGRES_CONNECTION_STRING) {
      if (!config.POSTGRES_HOST) throw new Error('POSTGRES_HOST is required');
      if (!config.POSTGRES_PORT) throw new Error('POSTGRES_PORT is required');
      if (!config.POSTGRES_DATABASE) throw new Error('POSTGRES_DATABASE is required');
      if (!config.POSTGRES_USER) throw new Error('POSTGRES_USER is required');
      if (!config.POSTGRES_PASSWORD) throw new Error('POSTGRES_PASSWORD is required');
    }
  }
  
  // MDC validation
  if (config.STORAGE_TYPE === 'mdc') {
    if (!config.MDC_RULES_DIR) config.MDC_RULES_DIR = './.cursor/rules';
  }
  
  // Server defaults
  if (!config.LOG_LEVEL) config.LOG_LEVEL = 'info';
  if (config.HTTP_SERVER === undefined) config.HTTP_SERVER = false;
  if (!config.PORT) config.PORT = 3003;
  if (!config.HOST) config.HOST = '0.0.0.0';
  
  return config as Config;
}
```

## CLI Option Updates

Update the CLI options to include MDC configuration:

```typescript
program
  .option('-t, --storage-type <type>', 'Storage type (file, postgres, mdc)', 'file')
  .option('-d, --prompts-dir <dir>', 'Directory for prompt storage (file adapter)')
  .option('-b, --backups-dir <dir>', 'Directory for backups (file adapter)')
  .option('-h, --postgres-host <host>', 'PostgreSQL host (postgres adapter)')
  .option('-p, --postgres-port <port>', 'PostgreSQL port (postgres adapter)')
  .option('-db, --postgres-database <db>', 'PostgreSQL database (postgres adapter)')
  .option('-u, --postgres-user <user>', 'PostgreSQL user (postgres adapter)')
  .option('-pw, --postgres-password <password>', 'PostgreSQL password (postgres adapter)')
  .option('-ssl, --postgres-ssl', 'Enable PostgreSQL SSL (postgres adapter)')
  .option('-m, --mdc-rules-dir <dir>', 'Directory for MDC rules (mdc adapter)')
  .option('-s, --http-server', 'Start HTTP server')
  .option('-P, --port <port>', 'HTTP server port')
  .option('-H, --host <host>', 'HTTP server host')
  .option('-l, --log-level <level>', 'Log level (error, warn, info, debug)')
  .parse(process.argv);
```

## Example Usage in Documentation

Add examples for using the MDC adapter in your documentation:

```markdown
### Using the MDC Adapter

To use the MDC adapter for storing prompts in Cursor Rules format:

1. Set up your environment with MDC configuration:

   ```bash
   echo "STORAGE_TYPE=mdc" > .env
   echo "MDC_RULES_DIR=./.cursor/rules" >> .env
   ```

2. Or provide configuration via command line:

   ```bash
   mcp-prompts --storage-type mdc --mdc-rules-dir ./.cursor/rules
   ```

3. Your prompts will now be stored as `.mdc` files in the specified directory, compatible with Cursor Rules format.
``` 