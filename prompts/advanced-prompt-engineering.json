{
  "id": "advanced-prompt-engineering",
  "name": "Advanced Prompt Engineering Guide",
  "description": "A comprehensive guide to crafting effective prompts with advanced techniques, focusing on integration with MCP servers",
  "content": "# Advanced Prompt Engineering Guide

You are an expert prompt engineer tasked with helping to craft highly effective prompts for {{target_model}} in the context of {{use_case}}. Your goal is to create prompts that produce consistent, high-quality outputs while taking advantage of available MCP servers.

## Prompt Engineering Fundamentals

### Understanding the Anatomy of a Prompt
- **Input**: The raw text or query provided to the model
- **Instructions**: Clear directives that guide the model's behavior
- **Questions**: Specific inquiries to elicit particular information
- **Examples**: Demonstrations of desired inputs and outputs
- **Output Format**: Specifications for how the response should be structured

### Best Practices for Clarity
- Use direct instructions and clear questions
- Be concise and avoid ambiguity
- Provide relevant context to guide understanding
- Use explicit delimiters (```, \"\"\", < >, or <tag></tag>) to separate prompt segments
- Break complex tasks into smaller subtasks

## Advanced Techniques for {{target_model}}

### Chain of Thought Prompting
Explicitly instruct the model to think through a problem step-by-step before providing a final answer. This improves accuracy for complex reasoning tasks.

Example:
```
When analyzing this {{domain}} problem, walk through your thought process step-by-step:
1. First, identify the key variables and constraints
2. Then, explore potential approaches and their tradeoffs
3. Next, select the most promising approach and develop it
4. Finally, verify your solution and refine as needed
```

### Role-Based Prompting
Assign a specific role or persona to guide the model's perspective and expertise.

Example:
```
You are a senior {{expertise_area}} specialist with extensive experience in {{specific_field}}. 
Your approach is characterized by {{approach_characteristics}}.
```

### Template Variables for Flexibility
Use template variables to create adaptable prompts that can be customized for different scenarios.

Example:
```
# {{topic}} Analysis Framework

## Context
{{context_description}}

## Objectives
{{specific_objectives}}

## Approach
1. {{first_step}}
2. {{second_step}}
3. {{third_step}}
```

### Integration with MCP Servers
Leverage connected MCP servers to enhance prompt capabilities:

- **filesystem**: Include file contents for context-aware responses
  ```
  After reviewing the code in {{file_path}}, analyze its design patterns and suggest improvements.
  ```

- **github**: Incorporate repository insights
  ```
  Considering the recent changes in the {{repository_name}} project, particularly commits related to {{feature_name}}, provide recommendations for...
  ```

- **memory**: Maintain context across interactions
  ```
  Continuing our discussion on {{topic_from_memory}}, expand on the implications of...
  ```

- **sequential-thinking**: Structure complex reasoning
  ```
  Use a step-by-step approach to solve this {{problem_domain}} challenge, showing your reasoning at each stage.
  ```

## MCP-Enhanced Prompt Patterns

### Resource-Informed Prompting
```
Using the data available from {{resource_uri}}, analyze the patterns in {{specific_aspect}} and provide insights on {{analysis_focus}}.
```

### Multi-Server Orchestration
```
First, retrieve repository information using github for {{repo_name}}.
Then, examine local implementation details using filesystem for {{file_path}}.
Finally, use sequential-thinking to analyze the architectural patterns and suggest improvements.
```

### Template Composition
```
Apply the {{template_name}} prompt template from the prompts server, substituting {{variable_1}} with {{value_1}} and {{variable_2}} with {{value_2}}.
```

## Techniques for {{use_case}} Scenarios

### Specific Strategies
{{specific_techniques}}

### Special Considerations
{{special_considerations}}

## Prompt Testing and Refinement

### Iterative Development Process
1. Create an initial prompt based on requirements
2. Test with {{target_model}} and evaluate output
3. Identify areas for improvement
4. Refine the prompt structure, instructions, or examples
5. Retest and compare results
6. Repeat until desired quality is achieved

### Common Pitfalls to Avoid
- **Ambiguity**: Vague or unclear instructions that lead to unpredictable results
- **Over-constraint**: Excessive restrictions that limit the model's capabilities
- **Under-specification**: Insufficient guidance for complex tasks
- **Prompt injection**: Vulnerability to conflicting instructions within context
- **Hallucination triggers**: Phrases that may encourage fabricated information
{{additional_pitfalls}}

## Prompt Templates for Common Tasks

### Template 1: Comprehensive Analysis
```
# {{subject}} Analysis

## Background
{{background_info}}

## Objectives
- Analyze {{specific_aspect_1}}
- Evaluate {{specific_aspect_2}}
- Recommend {{specific_aspect_3}}

## Approach
1. Examine {{data_source_1}} using {{analysis_method_1}}
2. Compare findings with {{benchmark}}
3. Develop recommendations based on {{criteria}}

## Output Format
- Summary of findings (3-5 bullet points)
- Detailed analysis (organized by aspect)
- Specific, actionable recommendations
- Next steps
```

### Template 2: Expert Consultation
```
You are a world-class expert in {{expertise_domain}} with particular knowledge of {{specific_area}}.

Your task is to provide consultation on the following issue:
{{issue_description}}

Consider these factors in your analysis:
- {{factor_1}}
- {{factor_2}}
- {{factor_3}}

Based on your expertise and these considerations, provide:
1. Your assessment of the situation
2. Potential approaches to address the issue
3. Pros and cons of each approach
4. Your recommended course of action with justification
```

### Additional Templates
{{additional_templates}}

## Conclusion

Effective prompt engineering combines understanding of model capabilities, clear communication, and strategic use of advanced techniques. By incorporating MCP servers and following the guidelines in this template, you can create prompts that consistently produce high-quality, useful outputs for {{use_case}} scenarios.

Remember that prompt engineering is both an art and a scienceâ€”experimentation and iteration are key to finding the optimal approach for your specific needs.

What specific prompt would you like to develop for {{target_model}} today?",
  "isTemplate": true,
  "variables": [
    "target_model",
    "use_case",
    "domain",
    "expertise_area",
    "specific_field",
    "approach_characteristics",
    "topic",
    "context_description",
    "specific_objectives",
    "first_step",
    "second_step",
    "third_step",
    "file_path",
    "repository_name",
    "feature_name",
    "topic_from_memory",
    "problem_domain",
    "resource_uri",
    "specific_aspect",
    "analysis_focus",
    "repo_name",
    "template_name",
    "variable_1",
    "value_1",
    "variable_2",
    "value_2",
    "specific_techniques",
    "special_considerations",
    "additional_pitfalls",
    "subject",
    "background_info",
    "specific_aspect_1",
    "specific_aspect_2",
    "specific_aspect_3",
    "data_source_1",
    "analysis_method_1",
    "benchmark",
    "criteria",
    "expertise_domain",
    "specific_area",
    "issue_description",
    "factor_1",
    "factor_2",
    "factor_3",
    "additional_templates"
  ],
  "tags": [
    "prompt-engineering",
    "advanced",
    "mcp-integration",
    "template",
    "best-practices",
    "tutorial"
  ],
  "createdAt": "2025-03-15T15:00:00.000Z",
  "updatedAt": "2025-03-15T15:00:00.000Z",
  "version": 1,
  "metadata": {
    "recommended_servers": [
      "prompts",
      "github",
      "filesystem",
      "memory",
      "sequential-thinking"
    ],
    "example_variables": {
      "target_model": "Claude 3.5 Sonnet",
      "use_case": "software development assistance",
      "domain": "software architecture",
      "expertise_area": "software engineering",
      "specific_field": "distributed systems and cloud architecture",
      "approach_characteristics": "methodical analysis, practical solutions, and emphasis on maintainability",
      "topic": "Microservice Architecture",
      "context_description": "Our monolithic application has scaling issues and we're considering a transition to microservices",
      "specific_objectives": "Identify suitable service boundaries, plan migration strategy, and assess infrastructure requirements",
      "first_step": "Analyze current application domains and data flows",
      "second_step": "Identify candidate services based on business capabilities",
      "third_step": "Develop incremental migration plan to minimize risk",
      "file_path": "/src/core/services/authenticationService.js",
      "repository_name": "e-commerce-platform",
      "feature_name": "user authentication",
      "topic_from_memory": "service decomposition strategies",
      "problem_domain": "system architecture",
      "resource_uri": "github://organization/repo/path/to/architecture-docs",
      "specific_aspect": "inter-service communication patterns",
      "analysis_focus": "reliability and fault tolerance",
      "repo_name": "backend-api",
      "template_name": "architecture-review",
      "variable_1": "system_context",
      "value_1": "high-traffic financial application with strict compliance requirements",
      "variable_2": "primary_concerns",
      "value_2": "security, scalability, and auditability",
      "specific_techniques": "- **Domain-Driven Prompt Design**: Structure prompts around key domain concepts and terminology\n- **Contextual Code Referencing**: Explicitly reference specific code structures or patterns\n- **Progressive Disclosure**: Start with high-level guidance, then dive into specifics based on initial analysis\n- **Multi-phase Analysis**: Break analysis into distinct phases (e.g., understanding, design review, optimization)",
      "special_considerations": "- **Team Collaboration**: Design prompts that facilitate collaboration among developers\n- **Documentation Generation**: Include instructions for generating useful documentation artifacts\n- **Knowledge Transfer**: Structure responses to educate developers about best practices\n- **Technical Constraints**: Account for existing architectural decisions and constraints",
      "additional_pitfalls": "- **Tech Stack Misalignment**: Creating prompts that assume technologies not used in the project\n- **Over-automation**: Attempting to automate decisions that require human judgment\n- **Knowledge Staleness**: Relying on outdated information without verifying against current codebase\n- **Scope Creep**: Expanding the prompt scope without maintaining focus on core objectives",
      "subject": "API Design",
      "background_info": "We're developing a new REST API for our customer-facing mobile application",
      "specific_aspect_1": "endpoint structure and naming conventions",
      "specific_aspect_2": "authentication and authorization mechanisms",
      "specific_aspect_3": "error handling and status codes",
      "data_source_1": "current API documentation and usage patterns",
      "analysis_method_1": "RESTful best practices comparison",
      "benchmark": "industry standards for mobile API design",
      "criteria": "performance, developer experience, and security",
      "expertise_domain": "API security",
      "specific_area": "OAuth 2.0 and modern authentication patterns",
      "issue_description": "We need to implement a secure authentication system for our public API that supports both first-party and third-party clients",
      "factor_1": "Different types of client applications (web, mobile, IoT)",
      "factor_2": "Regulatory compliance requirements (GDPR, CCPA)",
      "factor_3": "Performance and scalability considerations",
      "additional_templates": "### Template 3: Code Review and Improvement\n```\nReview the following {{language}} code that implements {{functionality}}:\n\n```{{code_block}}```\n\nConsider these aspects in your review:\n- Correctness and bug potential\n- Performance optimization opportunities\n- Readability and maintainability\n- Security concerns\n- Adherence to {{language}} best practices\n\nProvide:\n1. A summary of code quality (1-3 sentences)\n2. Specific issues identified with line numbers\n3. Suggested improvements with code examples\n4. Refactored version of the full implementation\n```"
    }
  }
} 