version: "3.8"

name: mcp-prompts-dev

services:
  # PostgreSQL database for development
  postgres:
    image: postgres:14-alpine
    container_name: mcp-postgres-dev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mcp_prompts_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mcp-dev-network

  # MCP Prompts Server in development mode
  mcp-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: mcp-prompts-dev
    environment:
      - NODE_ENV=development
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/data/prompts
      - BACKUPS_DIR=/app/data/backups
      - LOG_LEVEL=debug
      - HTTP_SERVER=true
      - PORT=3003
      - HOST=0.0.0.0
    volumes:
      - .:/app
      - dev_storage:/app/data
      - node_modules:/app/node_modules
    ports:
      - "3003:3003"
    command: npm run dev
    restart: unless-stopped
    networks:
      - mcp-dev-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: mcp-adminer-dev
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - mcp-dev-network

volumes:
  postgres_dev_data:
    name: mcp-postgres-dev-data
  dev_storage:
    name: mcp-dev-storage
  node_modules:

networks:
  mcp-dev-network:
    driver: bridge 