# Base Docker Compose file for MCP Prompts
# This file provides the foundational configuration

name: mcp-prompts

services:
  # MCP Prompts Server
  mcp-prompts:
    image: sparesparrow/mcp-prompts:latest
    container_name: mcp-prompts
    environment:
      - NODE_ENV=production
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/data/prompts
      - BACKUPS_DIR=/app/data/backups
      - LOG_LEVEL=info
      - HTTP_SERVER=true
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - mcp-data:/app/data
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "/health-check.sh"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Prompts Server with SSE support
  mcp-prompts-sse:
    image: sparesparrow/mcp-prompts:latest
    container_name: mcp-prompts-sse
    environment:
      - NODE_ENV=production
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/data/prompts
      - BACKUPS_DIR=/app/data/backups
      - LOG_LEVEL=info
      - HTTP_SERVER=true
      - PORT=3003
      - HOST=0.0.0.0
      - ENABLE_SSE=true
      - SSE_PATH=/events
      - CORS_ORIGIN=*
    volumes:
      - mcp-data:/app/data
    ports:
      - "3003:3003"
    healthcheck:
      test: ["CMD-SHELL", "/health-check.sh"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: mcp-prompts-postgres
    environment:
      - POSTGRES_USER=mcp
      - POSTGRES_PASSWORD=mcp_pass
      - POSTGRES_DB=mcp_prompts
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5442:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp -d mcp_prompts"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mcp-network

  # Adminer for PostgreSQL management
  adminer:
    image: adminer:latest
    container_name: mcp-adminer
    depends_on:
      - postgres
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  mcp-data:
    name: mcp-prompts-data
  postgres-data:
    name: mcp-prompts-postgres-data

networks:
  mcp-network:
    name: mcp-network
