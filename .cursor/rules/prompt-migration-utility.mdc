---
description: Utility for migrating prompts between different storage adapters
globs: ["src/utils/migration.ts", "bin/migrate.ts", "package.json"]
---

# Prompt Migration Utility

## Migration Architecture

The prompt migration utility provides a way to move prompts between different storage types (file, PostgreSQL, and MDC) while preserving all metadata and content.

```mermaid
graph TD
    A[Source Adapter] --> B[Migration Utility]
    B --> C[Target Adapter]
    D[File Storage] --- A
    E[PostgreSQL Storage] --- A
    F[MDC Storage] --- A
    D --- C
    E --- C
    F --- C
```

## Core Migration Function

The core migration function in `src/utils/migration.ts`:

```typescript
import { StorageAdapter, Prompt } from '../interfaces/storage';
import { Logger } from '../utils/logger';

export interface MigrationResult {
  success: number;
  failed: number;
  errors: Array<{ id: string; error: string }>;
}

export async function migratePrompts(
  sourceAdapter: StorageAdapter,
  targetAdapter: StorageAdapter,
  logger: Logger = new Logger('Migration')
): Promise<MigrationResult> {
  let success = 0;
  let failed = 0;
  const errors: Array<{ id: string; error: string }> = [];
  
  try {
    // Ensure both adapters are connected
    if (!sourceAdapter.isConnected()) {
      logger.info('Connecting to source adapter...');
      await sourceAdapter.connect();
    }
    
    if (!targetAdapter.isConnected()) {
      logger.info('Connecting to target adapter...');
      await targetAdapter.connect();
    }
    
    // Get all prompts from the source
    logger.info('Fetching prompts from source adapter...');
    const prompts = await sourceAdapter.listPrompts();
    logger.info(`Found ${prompts.length} prompts to migrate`);
    
    // Save each prompt to the target
    for (const prompt of prompts) {
      try {
        logger.debug(`Migrating prompt: ${prompt.id}`);
        await targetAdapter.savePrompt(prompt);
        success++;
        logger.debug(`Successfully migrated prompt: ${prompt.id}`);
      } catch (error) {
        logger.error(`Failed to migrate prompt ${prompt.id}: ${error.message}`);
        failed++;
        errors.push({ id: prompt.id, error: error.message });
      }
    }
    
    logger.info(`Migration complete: ${success} succeeded, ${failed} failed`);
    return { success, failed, errors };
  } catch (error) {
    logger.error(`Migration failed: ${error.message}`);
    return { success, failed, errors };
  }
}
```

## CLI Migration Tool

Create a CLI migration tool in `bin/migrate.ts`:

```typescript
#!/usr/bin/env node
import { Command } from 'commander';
import { Logger } from '../src/utils/logger';
import { loadConfig } from '../src/config';
import { createAdapter } from '../src/adapters/adapter-factory';
import { migratePrompts } from '../src/utils/migration';

const program = new Command();
const logger = new Logger('Migration CLI');

program
  .name('mcp-prompts-migrate')
  .description('Migrate prompts between different storage types')
  .version('1.0.0')
  .option('-s, --source-type <type>', 'Source storage type (file, postgres, mdc)', 'file')
  .option('-t, --target-type <type>', 'Target storage type (file, postgres, mdc)', 'mdc')
  .option('--source-dir <dir>', 'Source directory for file or mdc adapter')
  .option('--target-dir <dir>', 'Target directory for file or mdc adapter')
  .option('--source-pg-host <host>', 'Source PostgreSQL host')
  .option('--source-pg-port <port>', 'Source PostgreSQL port')
  .option('--source-pg-db <database>', 'Source PostgreSQL database')
  .option('--source-pg-user <user>', 'Source PostgreSQL user')
  .option('--source-pg-password <password>', 'Source PostgreSQL password')
  .option('--target-pg-host <host>', 'Target PostgreSQL host')
  .option('--target-pg-port <port>', 'Target PostgreSQL port')
  .option('--target-pg-db <database>', 'Target PostgreSQL database')
  .option('--target-pg-user <user>', 'Target PostgreSQL user')
  .option('--target-pg-password <password>', 'Target PostgreSQL password')
  .option('-v, --verbose', 'Enable verbose logging', false)
  .action(async (options) => {
    try {
      // Set up logging
      logger.setLevel(options.verbose ? 'debug' : 'info');
      logger.info('Starting migration...');
      
      // Load default config
      const config = loadConfig();
      
      // Create source adapter config
      const sourceConfig: any = {
        STORAGE_TYPE: options.sourceType,
      };
      
      if (options.sourceType === 'file' || options.sourceType === 'mdc') {
        if (options.sourceDir) {
          sourceConfig.PROMPTS_DIR = options.sourceType === 'file' ? options.sourceDir : undefined;
          sourceConfig.MDC_RULES_DIR = options.sourceType === 'mdc' ? options.sourceDir : undefined;
        }
      } else if (options.sourceType === 'postgres') {
        sourceConfig.POSTGRES_HOST = options.sourcePgHost || config.POSTGRES_HOST;
        sourceConfig.POSTGRES_PORT = options.sourcePgPort || config.POSTGRES_PORT;
        sourceConfig.POSTGRES_DATABASE = options.sourcePgDb || config.POSTGRES_DATABASE;
        sourceConfig.POSTGRES_USER = options.sourcePgUser || config.POSTGRES_USER;
        sourceConfig.POSTGRES_PASSWORD = options.sourcePgPassword || config.POSTGRES_PASSWORD;
      }
      
      // Create target adapter config
      const targetConfig: any = {
        STORAGE_TYPE: options.targetType,
      };
      
      if (options.targetType === 'file' || options.targetType === 'mdc') {
        if (options.targetDir) {
          targetConfig.PROMPTS_DIR = options.targetType === 'file' ? options.targetDir : undefined;
          targetConfig.MDC_RULES_DIR = options.targetType === 'mdc' ? options.targetDir : undefined;
        }
      } else if (options.targetType === 'postgres') {
        targetConfig.POSTGRES_HOST = options.targetPgHost || config.POSTGRES_HOST;
        targetConfig.POSTGRES_PORT = options.targetPgPort || config.POSTGRES_PORT;
        targetConfig.POSTGRES_DATABASE = options.targetPgDb || config.POSTGRES_DATABASE;
        targetConfig.POSTGRES_USER = options.targetPgUser || config.POSTGRES_USER;
        targetConfig.POSTGRES_PASSWORD = options.targetPgPassword || config.POSTGRES_PASSWORD;
      }
      
      // Create adapters
      logger.info(`Creating source adapter (${options.sourceType})...`);
      const sourceAdapter = createAdapter(sourceConfig, logger);
      
      logger.info(`Creating target adapter (${options.targetType})...`);
      const targetAdapter = createAdapter(targetConfig, logger);
      
      // Run migration
      logger.info('Starting migration process...');
      const result = await migratePrompts(sourceAdapter, targetAdapter, logger);
      
      // Output results
      logger.info(`Migration complete: ${result.success} succeeded, ${result.failed} failed`);
      
      if (result.failed > 0) {
        logger.info('Errors:');
        for (const error of result.errors) {
          logger.error(`  - ${error.id}: ${error.error}`);
        }
        process.exit(1);
      }
      
      process.exit(0);
    } catch (error) {
      logger.error(`Migration failed: ${error.message}`);
      process.exit(1);
    }
  });

program.parse(process.argv);
```

## Update Package.json

Update `package.json` to include the migration tool:

```json
{
  "name": "@sparesparrow/mcp-prompts",
  "version": "1.0.0",
  "bin": {
    "mcp-prompts": "./dist/bin/cli.js",
    "mcp-prompts-migrate": "./dist/bin/migrate.js"
  },
  "scripts": {
    "migrate": "ts-node bin/migrate.ts",
    // ... other scripts
  },
  // ... other package.json contents
}
```

## Example Migration Commands

Here are examples of how to use the migration utility:

### Migrate from File to MDC

```bash
# Using npm script
npm run migrate -- --source-type file --target-type mdc \
  --source-dir ./prompts --target-dir ./.cursor/rules

# Using CLI directly
mcp-prompts-migrate --source-type file --target-type mdc \
  --source-dir ./prompts --target-dir ./.cursor/rules
```

### Migrate from PostgreSQL to MDC

```bash
# Using npm script
npm run migrate -- --source-type postgres --target-type mdc \
  --source-pg-host localhost --source-pg-port 5432 \
  --source-pg-db mcp_prompts --source-pg-user postgres \
  --source-pg-password postgres --target-dir ./.cursor/rules

# Using CLI directly
mcp-prompts-migrate --source-type postgres --target-type mdc \
  --source-pg-host localhost --source-pg-port 5432 \
  --source-pg-db mcp_prompts --source-pg-user postgres \
  --source-pg-password postgres --target-dir ./.cursor/rules
```

## MDC File Format Reference

When migrating to MDC, prompts will be formatted as Cursor Rules files:

```markdown
---
description: A description of the prompt
globs: ["*.ts", "src/**/*.js"]
---

# Prompt Title

Prompt content goes here.
This can be multiple lines and include Markdown formatting.

## Variables

- `variable1`: Description of the first variable
  - Required: true
- `variable2`: Description of the second variable
```

When migrating from MDC to another format, the migration utility will parse the MDC files and extract the relevant prompt information, including variables defined in the document. 