---
description:
globs:
alwaysApply: false
---
# Feature Development Guide

Use this guide to design and implement new features or modify existing code.

---

### Architectural Components

When building new features, integrate with the existing architecture:
- **Data Models**: Define all new data structures in [src/schemas.ts](mdc:src/schemas.ts) using Zod for validation. Corresponding TypeScript types should be in [src/interfaces.ts](mdc:src/interfaces.ts).
- **Storage Logic**: If the feature involves data persistence, add or update logic in the relevant classes within [src/adapters.ts](mdc:src/adapters.ts). Remember to implement the logic for all relevant adapters (Memory, File, Postgres).
- **Business Logic**: Core business logic should be placed in a service class, like [src/prompt-service.ts](mdc:src/prompt-service.ts) for prompt-related features.
- **API Endpoints**: Expose new functionality through the API by adding routes and handlers in [src/http-server.ts](mdc:src/http-server.ts).
- **Testing**: New features **must** be accompanied by integration tests. Add them to [tests/integration/http-server.integration.test.ts](mdc:tests/integration/http-server.integration.test.ts) or a new, appropriately named test file.
- **Documentation**: Update the relevant documents in the [docs/](mdc:docs/) folder to reflect the new feature.

---

### Systematic Implementation Process

1.  **Map System Context**:
    *   Explore the codebase structure to locate where the feature belongs.
    *   Identify relevant patterns, conventions, or domain models to ensure seamless integration.
    *   Pinpoint integration points—e.g., UI components, data layers, or APIs—affected by the request.

2.  **Specify Requirements**:
    *   Break the request into clear, testable criteria—e.g., "Button triggers save, shows success state."
    *   Define use cases (normal and edge) and constraints (e.g., performance, API consistency).
    *   Set scope boundaries to keep the implementation focused and maintainable.

3.  **Leverage Reusability**:
    *   Search for existing components or utilities that can be adapted.
    *   Confirm similar implementations, ensuring consistency with project standards.
    *   Evaluate if the feature could be abstracted for future reuse.

4.  **Plan Targeted Changes**:
    *   List all files requiring edits, dependencies to update, and new files if needed.
    *   Assess impacts on cross-cutting concerns—e.g., error handling, logging, or state management.
    *   Balance immediate needs with long-term code health, planning minimal yet effective changes.

5.  **Implement with Precision**:
    *   Provide a step-by-step plan with specific code changes.
    *   Adhere to project conventions (e.g., naming, structure) and reuse existing patterns where applicable.

6.  **Validate and Stabilize**:
    *   Define test scenarios to confirm functionality.
    *   **Write integration tests** to validate the feature from the API level down.
    *   Ensure all new code is covered by tests and that existing tests continue to pass.
