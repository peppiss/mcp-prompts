---
description: Create shared API contracts, OpenAPI generation, and golden test suite for cross-language compatibility
globs:
  - "packages/mcp-prompts-contracts/**/*"
  - "src/interfaces.ts"
  - "src/routers/**/*"
  - "tests/integration/**/*"
  - "scripts/generate-openapi.ts"
alwaysApply: false
---

# Contracts Creation & API Standardization

This rule contains all tasks needed to create shared API contracts, implement type-driven OpenAPI generation, and establish a golden test suite for ensuring consistency across implementations.

## Phase 2 Tasks

### Task 1: Relocate and Enhance TypeScript Interfaces
- [ ] Move `src/interfaces.ts` to `packages/mcp-prompts-contracts/src/interfaces.ts`
- [ ] Enhance interfaces with comprehensive JSDoc comments for OpenAPI generation
- [ ] Add validation decorators and constraints:
  ```typescript
  export interface Prompt {
    /** Unique identifier for the prompt */
    id: string;
    /** Display name of the prompt */
    name: string;
    /** Prompt content with optional template variables */
    content: string;
    /** List of template variables used in content */
    variables?: string[];
    /** Tags for categorization and filtering */
    tags?: string[];
    /** ISO timestamp of creation */
    createdAt: string;
    /** ISO timestamp of last update */
    updatedAt: string;
  }
  ```
- [ ] Create comprehensive type definitions for all API operations
- [ ] Export types for external consumption

### Task 2: Implement Type-Driven OpenAPI Generation
- [ ] Install and configure `tsoa` for robust OpenAPI generation:
  ```bash
  npm install tsoa swagger-ui-express
  ```
- [ ] Create `scripts/generate-openapi.ts`:
  ```typescript
  import { generateSpec, generateRoutes } from 'tsoa';
  
  async function generateApiSpec() {
    await generateSpec({
      basePath: '/api',
      entryFile: './src/server.ts',
      specVersion: 3,
      outputDirectory: './packages/mcp-prompts-contracts',
      controllerPathGlobs: ['./src/routers/**/*.ts']
    });
  }
  ```
- [ ] Refactor Express routers in `src/routers/` to use tsoa decorators:
  ```typescript
  @Route("prompts")
  @Tags("Prompts")
  export class PromptsController extends Controller {
    @Get("/")
    @OperationId("listPrompts")
    public async getPrompts(): Promise<Prompt[]> {
      // Implementation
    }
  }
  ```
- [ ] Generate OpenAPI spec to `packages/mcp-prompts-contracts/openapi.json`

### Task 3: Setup Pre-commit Hooks for Spec Generation
- [ ] Install husky and lint-staged:
  ```bash
  npm install --save-dev husky lint-staged
  ```
- [ ] Configure pre-commit hook in `package.json`:
  ```json
  {
    "lint-staged": {
      "src/**/*.ts": [
        "npm run gen:openapi",
        "git add packages/mcp-prompts-contracts/openapi.json"
      ]
    }
  }
  ```
- [ ] Create `npm run gen:openapi` script
- [ ] Ensure OpenAPI spec is always up-to-date with code changes

### Task 4: Create Golden Test Suite
- [ ] Move integration tests from `tests/integration/` to `packages/mcp-prompts-contracts/tests/golden.test.ts`
- [ ] Design tests to run against any base URL via `BASE_URL` environment variable:
  ```typescript
  describe('Golden Test Suite', () => {
    const baseUrl = process.env.BASE_URL || 'http://localhost:3003';
    
    test('should create and retrieve prompt', async () => {
      // Test implementation with strict JSON validation
    });
  });
  ```
- [ ] Add strict cross-language compatibility tests:
  - JSON casing consistency (camelCase vs snake_case)
  - Null vs undefined handling
  - Date format standardization
  - Error response format validation
- [ ] Create test data fixtures and snapshots
- [ ] Add performance benchmarks for core operations

### Task 5: Cross-Platform Type Generation
- [ ] Setup `openapi-generator` for Kotlin DTOs (future Android app):
  ```json
  {
    "scripts": {
      "gen:kotlin": "openapi-generator generate -i packages/mcp-prompts-contracts/openapi.json -g kotlin -o generated/kotlin"
    }
  }
  ```
- [ ] Setup `openapi-generator` for Rust types (future Rust implementation):
  ```json
  {
    "scripts": {
      "gen:rust": "openapi-generator generate -i packages/mcp-prompts-contracts/openapi.json -g rust -o generated/rust"
    }
  }
  ```
- [ ] Create generation scripts for multiple target languages
- [ ] Document type generation process for contributors

### Task 6: Update Core Dependencies
- [ ] Add contracts package to root `devDependencies`:
  ```json
  {
    "devDependencies": {
      "@sparesparrow/mcp-prompts-contracts": "workspace:*"
    }
  }
  ```
- [ ] Refactor all imports in `src/` to use contracts package:
  ```typescript
  import { Prompt, PromptCreateRequest } from '@sparesparrow/mcp-prompts-contracts';
  ```
- [ ] Update error handling to use standardized error types
- [ ] Ensure type safety across all modules

### Task 7: API Documentation Enhancement
- [ ] Create interactive Swagger UI endpoint at `/api-docs`
- [ ] Add comprehensive API examples and use cases
- [ ] Document authentication and authorization schemes
- [ ] Create API versioning strategy and implementation
- [ ] Add rate limiting and security considerations to spec

### Task 8: Validation and Schema Enforcement
- [ ] Implement runtime validation using generated schemas:
  ```typescript
  import Ajv from 'ajv';
  import { openApiSpec } from '@sparesparrow/mcp-prompts-contracts';
  
  const ajv = new Ajv();
  const validate = ajv.compile(openApiSpec.components.schemas.Prompt);
  ```
- [ ] Add request/response validation middleware
- [ ] Create schema violation error handling
- [ ] Add validation tests for all endpoints

## Success Criteria
- [ ] OpenAPI spec generates correctly from TypeScript interfaces
- [ ] Golden test suite passes against TypeScript implementation
- [ ] All API operations have comprehensive documentation
- [ ] Cross-language type generation works for Kotlin and Rust
- [ ] Pre-commit hooks ensure spec stays synchronized
- [ ] Runtime validation catches schema violations
- [ ] Interactive API documentation is accessible

## Files to Create/Modify
- `packages/mcp-prompts-contracts/src/interfaces.ts`
- `packages/mcp-prompts-contracts/openapi.json`
- `packages/mcp-prompts-contracts/tests/golden.test.ts`
- `packages/mcp-prompts-contracts/package.json`
- `scripts/generate-openapi.ts`
- `src/routers/**/*.ts` (refactor to use tsoa)
- `.husky/pre-commit`
- `package.json` (scripts and dependencies)

## Testing Requirements
- [ ] Unit tests for interface validation
- [ ] Integration tests for OpenAPI generation
- [ ] Cross-language compatibility tests
- [ ] API contract regression tests
- [ ] Performance benchmarks for all endpoints
- [ ] Error scenario testing (4xx, 5xx responses)

## Quality Gates
- [ ] OpenAPI spec validates against OpenAPI 3.0 schema
- [ ] All endpoints documented with examples
- [ ] Golden tests achieve 100% API coverage
- [ ] Generated types compile successfully in target languages
- [ ] No breaking changes to existing API without version bump

## Reference Documentation
- [tsoa documentation](https://tsoa-community.github.io/docs/)
- [OpenAPI 3.0 specification](https://swagger.io/specification/)
- [JSON Schema validation](https://json-schema.org/)
- [API versioning best practices](https://restfulapi.net/versioning/)