---
description: Guidelines for implementing the MDC (Markdown Cursor Rules) storage adapter
globs: ["src/adapters/mdc*.ts", "src/interfaces/storage.ts", "src/interfaces/adapter-factory.ts"]
---

# MDC Adapter Implementation Guidelines

## Adapter Architecture

The MdcAdapter implements the StorageAdapter interface and manages prompts in the Cursor Rules `.mdc` format, a Markdown-based format used by Cursor IDE:

```typescript
import { StorageAdapter, Prompt, ListOptions } from '../interfaces/storage';
import * as fs from 'fs/promises';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { Logger } from '../utils/logger';

export class MdcAdapter implements StorageAdapter {
  private rulesDir: string;
  private logger: Logger;
  private connected: boolean = false;

  constructor(options: { rulesDir: string; logger?: Logger }) {
    this.rulesDir = options.rulesDir;
    this.logger = options.logger || new Logger('MdcAdapter');
  }

  async connect(): Promise<void> {
    try {
      await fs.mkdir(this.rulesDir, { recursive: true });
      this.connected = true;
      this.logger.info(`Connected to MDC storage at ${this.rulesDir}`);
    } catch (error) {
      this.logger.error(`Failed to connect to MDC storage: ${error.message}`);
      throw error;
    }
  }

  isConnected(): boolean {
    return this.connected;
  }
}
```

## Format Conversion

Converting between the internal Prompt format and MDC format requires careful handling of frontmatter and content:

```typescript
private promptToMdc(prompt: Prompt): string {
  // Start with frontmatter
  let mdc = '---\n';
  mdc += `description: ${prompt.description || ''}\n`;
  
  // Add globs if they exist in tags
  const globs = this.extractGlobsFromTags(prompt.tags || []);
  if (globs.length > 0) {
    mdc += `globs: ${JSON.stringify(globs)}\n`;
  }
  
  // Close frontmatter
  mdc += '---\n\n';
  
  // Add title
  mdc += `# ${prompt.name}\n\n`;
  
  // Add content
  mdc += prompt.content;
  
  // If the prompt is a template, add variable documentation
  if (prompt.isTemplate && prompt.variables && prompt.variables.length > 0) {
    mdc += '\n\n## Variables\n\n';
    for (const variable of prompt.variables) {
      mdc += `- \`${variable.name}\`: ${variable.description || ''}\n`;
      if (variable.required) {
        mdc += `  - Required: true\n`;
      }
    }
  }
  
  return mdc;
}

private mdcToPrompt(id: string, mdcContent: string): Prompt {
  // Parse frontmatter
  const frontmatterMatch = mdcContent.match(/---\n([\s\S]*?)\n---/);
  const frontmatter = frontmatterMatch ? frontmatterMatch[1] : '';
  
  // Extract description
  const descriptionMatch = frontmatter.match(/description: (.*)/);
  const description = descriptionMatch ? descriptionMatch[1].trim() : '';
  
  // Extract globs and convert to tags
  const globsMatch = frontmatter.match(/globs: (\[.*\])/);
  const globs = globsMatch ? JSON.parse(globsMatch[1]) : [];
  const tags = globs.map(glob => `glob:${glob}`);
  
  // Extract title
  const titleMatch = mdcContent.match(/# (.*)/);
  const name = titleMatch ? titleMatch[1].trim() : path.basename(id, '.mdc');
  
  // Extract content (everything after the title)
  const content = mdcContent.replace(/---\n[\s\S]*?\n---\n\n# .*\n\n/, '');
  
  // Extract variables if any
  const variables = this.extractVariablesFromContent(content);
  
  return {
    id,
    name,
    description,
    content,
    tags,
    isTemplate: variables.length > 0,
    variables,
    createdAt: new Date(),
    updatedAt: new Date()
  };
}
```

## Core CRUD Operations

Implement the standard CRUD operations:

```typescript
async savePrompt(prompt: Prompt): Promise<string> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  // Generate ID if not provided
  const id = prompt.id || this.generateId(prompt.name);
  prompt.id = id;
  
  // Convert to MDC format
  const mdcContent = this.promptToMdc(prompt);
  
  // Save to file
  const filePath = path.join(this.rulesDir, `${id}.mdc`);
  await fs.writeFile(filePath, mdcContent, 'utf8');
  
  this.logger.info(`Saved prompt: ${id}`);
  return id;
}

async getPrompt(id: string): Promise<Prompt | null> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  try {
    const filePath = path.join(this.rulesDir, `${id}.mdc`);
    const mdcContent = await fs.readFile(filePath, 'utf8');
    return this.mdcToPrompt(id, mdcContent);
  } catch (error) {
    if (error.code === 'ENOENT') {
      return null;
    }
    throw error;
  }
}

async listPrompts(options?: ListOptions): Promise<Prompt[]> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  // Get all files in directory
  const files = await fs.readdir(this.rulesDir);
  const mdcFiles = files.filter(file => file.endsWith('.mdc'));
  
  // Read and convert all files
  const prompts: Prompt[] = [];
  for (const file of mdcFiles) {
    const id = path.basename(file, '.mdc');
    try {
      const prompt = await this.getPrompt(id);
      if (prompt) {
        prompts.push(prompt);
      }
    } catch (error) {
      this.logger.error(`Error reading prompt ${id}: ${error.message}`);
    }
  }
  
  // Apply filtering if options provided
  return this.filterPrompts(prompts, options);
}

async updatePrompt(id: string, prompt: Partial<Prompt>): Promise<Prompt | null> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  // Get existing prompt
  const existingPrompt = await this.getPrompt(id);
  if (!existingPrompt) {
    return null;
  }
  
  // Merge updates
  const updatedPrompt: Prompt = {
    ...existingPrompt,
    ...prompt,
    id, // Ensure ID remains the same
    updatedAt: new Date()
  };
  
  // Save updated prompt
  await this.savePrompt(updatedPrompt);
  return updatedPrompt;
}

async deletePrompt(id: string): Promise<boolean> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  try {
    const filePath = path.join(this.rulesDir, `${id}.mdc`);
    await fs.unlink(filePath);
    this.logger.info(`Deleted prompt: ${id}`);
    return true;
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }
    throw error;
  }
}

async clear(): Promise<void> {
  if (!this.connected) {
    throw new Error('MDC adapter not connected');
  }
  
  const files = await fs.readdir(this.rulesDir);
  const mdcFiles = files.filter(file => file.endsWith('.mdc'));
  
  for (const file of mdcFiles) {
    await fs.unlink(path.join(this.rulesDir, file));
  }
  
  this.logger.info('Cleared all prompts');
}
```

## Helper Methods

Additional helper methods for ID generation, tag handling, and filtering:

```typescript
private generateId(name: string): string {
  const base = name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
  
  return base || uuidv4();
}

private extractGlobsFromTags(tags: string[]): string[] {
  return tags
    .filter(tag => tag.startsWith('glob:'))
    .map(tag => tag.replace('glob:', ''));
}

private filterPrompts(prompts: Prompt[], options?: ListOptions): Prompt[] {
  if (!options) {
    return prompts;
  }
  
  let filtered = prompts;
  
  // Filter by isTemplate
  if (options.isTemplate !== undefined) {
    filtered = filtered.filter(p => p.isTemplate === options.isTemplate);
  }
  
  // Filter by tags
  if (options.tags && options.tags.length > 0) {
    filtered = filtered.filter(prompt => {
      if (!prompt.tags) return false;
      return options.tags!.every(tag => prompt.tags!.includes(tag));
    });
  }
  
  // Filter by search term
  if (options.searchTerm) {
    const term = options.searchTerm.toLowerCase();
    filtered = filtered.filter(prompt => {
      return (
        prompt.name.toLowerCase().includes(term) ||
        (prompt.description && prompt.description.toLowerCase().includes(term)) ||
        prompt.content.toLowerCase().includes(term)
      );
    });
  }
  
  // Sort results
  if (options.sortBy) {
    filtered.sort((a, b) => {
      const aValue = a[options.sortBy!];
      const bValue = b[options.sortBy!];
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return options.sortDirection === 'desc'
          ? bValue.localeCompare(aValue)
          : aValue.localeCompare(bValue);
      }
      
      if (aValue instanceof Date && bValue instanceof Date) {
        return options.sortDirection === 'desc'
          ? bValue.getTime() - aValue.getTime()
          : aValue.getTime() - bValue.getTime();
      }
      
      return 0;
    });
  }
  
  return filtered;
}

private extractVariablesFromContent(content: string): Array<{name: string; description: string; required: boolean}> {
  const variables: Array<{name: string; description: string; required: boolean}> = [];
  const varSection = content.match(/## Variables\n\n([\s\S]*?)(\n\n|$)/);
  
  if (!varSection) {
    return variables;
  }
  
  const varContent = varSection[1];
  const varLines = varContent.split('\n');
  
  let currentVar: {name: string; description: string; required: boolean} | null = null;
  
  for (const line of varLines) {
    const varMatch = line.match(/- `([^`]+)`: (.*)/);
    if (varMatch) {
      if (currentVar) {
        variables.push(currentVar);
      }
      currentVar = {
        name: varMatch[1],
        description: varMatch[2],
        required: false
      };
    } else if (currentVar && line.includes('Required: true')) {
      currentVar.required = true;
    }
  }
  
  if (currentVar) {
    variables.push(currentVar);
  }
  
  return variables;
}
```

## Adapter Factory Integration

Update the adapter factory to include the MDC adapter:

```typescript
import { StorageAdapter } from '../interfaces/storage';
import { FileAdapter } from './file-adapter';
import { PostgresAdapter } from './postgres-adapter';
import { MdcAdapter } from './mdc-adapter';
import { Logger } from '../utils/logger';

export function createAdapter(config: any, logger: Logger): StorageAdapter {
  const storageType = (config.STORAGE_TYPE || 'file').toLowerCase();
  
  switch (storageType) {
    case 'file':
      return new FileAdapter({
        promptsDir: config.PROMPTS_DIR || './prompts',
        backupsDir: config.BACKUPS_DIR || './backups',
        logger
      });
      
    case 'postgres':
      return new PostgresAdapter({
        connectionString: config.POSTGRES_CONNECTION_STRING,
        host: config.POSTGRES_HOST,
        port: config.POSTGRES_PORT,
        database: config.POSTGRES_DATABASE,
        user: config.POSTGRES_USER,
        password: config.POSTGRES_PASSWORD,
        ssl: config.POSTGRES_SSL === 'true',
        logger
      });
      
    case 'mdc':
      return new MdcAdapter({
        rulesDir: config.MDC_RULES_DIR || './.cursor/rules',
        logger
      });
      
    default:
      throw new Error(`Unsupported storage type: ${storageType}`);
  }
}
```

## Environment Configuration Update

Add the MDC-specific configuration to the `.env.example` file:

```
# MDC Adapter Configuration
MDC_RULES_DIR=./.cursor/rules
```

## Testing the MDC Adapter

Write comprehensive tests for the MDC adapter:

```typescript
describe('MdcAdapter', () => {
  let adapter: MdcAdapter;
  const testDir = path.join(__dirname, '../test-rules');
  
  beforeEach(async () => {
    // Create a clean test directory
    await fs.rm(testDir, { recursive: true, force: true });
    await fs.mkdir(testDir, { recursive: true });
    
    adapter = new MdcAdapter({ rulesDir: testDir });
    await adapter.connect();
  });
  
  afterEach(async () => {
    // Clean up
    await fs.rm(testDir, { recursive: true, force: true });
  });
  
  test('should save and retrieve a prompt', async () => {
    const prompt: Prompt = {
      name: 'Test Prompt',
      description: 'A test prompt',
      content: 'This is a test prompt content',
      tags: ['test', 'glob:*.ts'],
      isTemplate: false
    };
    
    const id = await adapter.savePrompt(prompt);
    const savedPrompt = await adapter.getPrompt(id);
    
    expect(savedPrompt).not.toBeNull();
    expect(savedPrompt?.name).toBe(prompt.name);
    expect(savedPrompt?.description).toBe(prompt.description);
    expect(savedPrompt?.content).toBe(prompt.content);
    expect(savedPrompt?.tags).toContain('test');
    expect(savedPrompt?.tags).toContain('glob:*.ts');
  });
  
  // Add more tests for all adapter methods
});
```

## Migration Helper

Create a utility to migrate prompts between storage adapters:

```typescript
export async function migratePrompts(
  sourceAdapter: StorageAdapter,
  targetAdapter: StorageAdapter
): Promise<{success: number; failed: number}> {
  let success = 0;
  let failed = 0;
  
  try {
    // Ensure both adapters are connected
    if (!sourceAdapter.isConnected()) await sourceAdapter.connect();
    if (!targetAdapter.isConnected()) await targetAdapter.connect();
    
    // Get all prompts from the source
    const prompts = await sourceAdapter.listPrompts();
    
    // Save each prompt to the target
    for (const prompt of prompts) {
      try {
        await targetAdapter.savePrompt(prompt);
        success++;
      } catch (error) {
        console.error(`Failed to migrate prompt ${prompt.id}: ${error.message}`);
        failed++;
      }
    }
    
    return { success, failed };
  } catch (error) {
    console.error(`Migration failed: ${error.message}`);
    return { success, failed };
  }
}
``` 