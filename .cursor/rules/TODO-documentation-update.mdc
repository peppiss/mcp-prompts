---
description: Finalize documentation, cleanup legacy code, and complete the monorepo refactoring transition
globs:
  - "README.md"
  - "CONTRIBUTING.md"
  - "LICENSE"
  - "docs/**/*"
  - "src/**/*"
  - ".github/**/*"
alwaysApply: false
---

# Documentation Update & Project Finalization

This rule contains all tasks needed to finalize documentation, clean up legacy code, and complete the transition to the new monorepo architecture.

## Phase 4 Tasks

### Task 1: Update Main README.md
- [ ] Remove the large refactoring plan section from README
- [ ] Replace with concise links to individual .mdc files:
  ```markdown
  ## ðŸŽ¯ Refactoring Tasks
  
  Our refactoring tasks are organized into specific, actionable Cursor rules:
  
  - **[@workspace-setup.mdc](/.cursor/rules/workspace-setup.mdc)** - Initialize npm workspaces
  - **[@catalog-extraction.mdc](/.cursor/rules/catalog-extraction.mdc)** - Extract prompt catalog
  - **[@contracts-creation.mdc](/.cursor/rules/contracts-creation.mdc)** - Create API contracts
  - **[@pipeline-automation.mdc](/.cursor/rules/pipeline-automation.mdc)** - Automate CI/CD
  - **[@documentation-update.mdc](/.cursor/rules/documentation-update.mdc)** - Finalize documentation
  ```
- [ ] Focus README on end-user documentation and quick start
- [ ] Add badges for new package versions
- [ ] Update installation examples and API documentation links
- [ ] Verify all links and references work correctly

### Task 2: Create Comprehensive CONTRIBUTING.md
- [ ] Document the new workspace architecture:
  ```markdown
  # Contributing to MCP Prompts Server
  
  ## Architecture Overview
  
  This project uses a monorepo structure with npm workspaces:
  
  - `packages/mcp-prompts-catalog/` - Prompt catalog and templates
  - `packages/mcp-prompts-contracts/` - API contracts and types
  - `src/` - Core server implementation
  
  ## Development Workflow
  
  ### "Contracts-First" Development
  
  1. Define or modify interfaces in `mcp-prompts-contracts`
  2. Generate OpenAPI spec: `npm run gen:openapi`
  3. Update golden tests for new/changed APIs
  4. Implement changes in core server
  5. Update catalog if new prompt types are added
  ```
- [ ] Add local development setup instructions
- [ ] Document testing procedures for each workspace
- [ ] Include AI agent usage instructions for Cursor
- [ ] Add contribution guidelines and code of conduct
- [ ] Document release process and versioning strategy

### Task 3: Complete JSDoc Documentation
- [ ] Review all files in `src/` directory for JSDoc completeness
- [ ] Add comprehensive documentation for all public APIs:
  ```typescript
  /**
   * Retrieves a prompt by its unique identifier
   * @param id - The unique identifier of the prompt
   * @param options - Optional retrieval options
   * @returns Promise resolving to the prompt object
   * @throws {NotFoundError} When prompt with given ID doesn't exist
   * @throws {ValidationError} When ID format is invalid
   * @example
   * ```typescript
   * const prompt = await getPrompt('my-prompt-id');
   * console.log(prompt.content);
   * ```
   */
  ```
- [ ] Ensure all JSDoc comments support accurate OpenAPI generation
- [ ] Add examples and usage patterns for complex operations
- [ ] Document error scenarios and exception handling

### Task 4: Add License Files to All Packages
- [ ] Copy MIT license to `packages/mcp-prompts-catalog/LICENSE`
- [ ] Copy MIT license to `packages/mcp-prompts-contracts/LICENSE`
- [ ] Ensure license compatibility across all dependencies
- [ ] Add license headers to source files where appropriate
- [ ] Update package.json license fields for all workspaces

### Task 5: Create Package-Specific Documentation
- [ ] Create `packages/mcp-prompts-catalog/README.md`:
  ```markdown
  # MCP Prompts Catalog
  
  A curated collection of prompts and templates for the MCP ecosystem.
  
  ## Installation
  
  ```bash
  npm install @sparesparrow/mcp-prompts-catalog
  ```
  
  ## Usage
  
  ```javascript
  const { getPromptsDir, listPrompts } = require('@sparesparrow/mcp-prompts-catalog');
  ```
  ```
- [ ] Create `packages/mcp-prompts-contracts/README.md` with API documentation
- [ ] Add usage examples and integration guides for each package
- [ ] Document versioning and compatibility between packages

### Task 6: Update GitHub Repository Settings
- [ ] Create GitHub issue templates in `.github/ISSUE_TEMPLATE/`:
  - Bug report template
  - Feature request template
  - Documentation improvement template
  - Question/support template
- [ ] Create pull request template in `.github/PULL_REQUEST_TEMPLATE.md`
- [ ] Update repository description and topics
- [ ] Configure branch protection rules for main branch
- [ ] Set up GitHub Project board for task tracking

### Task 7: Documentation Website Setup
- [ ] Create documentation structure in `docs/` directory:
  ```
  docs/
  â”œâ”€â”€ configuration.md
  â”œâ”€â”€ api-reference.md
  â”œâ”€â”€ architecture.md
  â”œâ”€â”€ security.md
  â”œâ”€â”€ docker.md
  â”œâ”€â”€ migration-guide.md
  â””â”€â”€ assets/
      â””â”€â”€ demo.gif
  ```
- [ ] Set up GitHub Pages or documentation hosting
- [ ] Create navigation and cross-linking between documents
- [ ] Add search functionality if using documentation framework
- [ ] Generate API documentation from OpenAPI spec

### Task 8: Migration and Upgrade Guides
- [ ] Create migration guide for users upgrading from older versions
- [ ] Document breaking changes and deprecation notices
- [ ] Provide automated migration scripts where possible
- [ ] Add troubleshooting section for common upgrade issues
- [ ] Create compatibility matrix for different versions

### Task 9: Testing Documentation Cleanup
- [ ] Remove outdated test files and references
- [ ] Update test documentation to reflect new architecture
- [ ] Document testing strategy for each workspace
- [ ] Add performance testing documentation
- [ ] Create testing guidelines for contributors

### Task 10: Final Code Cleanup
- [ ] Remove unused dependencies from all package.json files
- [ ] Clean up commented-out code and TODOs
- [ ] Standardize code formatting across all workspaces
- [ ] Remove or update deprecated configurations
- [ ] Validate all import statements use workspace packages correctly

### Task 11: Release Preparation
- [ ] Verify all CI/CD pipelines pass successfully
- [ ] Test package installation from npm registry (if pre-published)
- [ ] Validate Docker images build and run correctly
- [ ] Run full integration test suite across all components
- [ ] Check security vulnerabilities with `npm audit`
- [ ] Verify workspace linking works in clean environment

### Task 12: Community and Marketing Content
- [ ] Create changelog entries for major refactoring
- [ ] Update social media and community links
- [ ] Prepare announcement content for refactoring completion
- [ ] Add contributor recognition and thanks
- [ ] Create demo content and showcase examples

## Success Criteria
- [ ] README.md is concise and user-focused (< 300 lines)
- [ ] CONTRIBUTING.md provides clear development guidelines
- [ ] All packages have appropriate documentation and licenses
- [ ] JSDoc comments generate accurate OpenAPI documentation
- [ ] GitHub repository is properly configured with templates
- [ ] Documentation website is functional and comprehensive
- [ ] Migration guides are complete and tested
- [ ] All tests pass and code is clean
- [ ] Community resources are up-to-date

## Files to Create/Modify
- `README.md` (major revision)
- `CONTRIBUTING.md` (new comprehensive guide)
- `packages/mcp-prompts-catalog/README.md`
- `packages/mcp-prompts-catalog/LICENSE`
- `packages/mcp-prompts-contracts/README.md`
- `packages/mcp-prompts-contracts/LICENSE`
- `.github/ISSUE_TEMPLATE/bug_report.md`
- `.github/ISSUE_TEMPLATE/feature_request.md`
- `.github/PULL_REQUEST_TEMPLATE.md`
- `docs/configuration.md`
- `docs/api-reference.md`
- `docs/architecture.md`
- `docs/migration-guide.md`
- `CHANGELOG.md`

## Quality Checks
- [ ] All documentation links work correctly
- [ ] Code examples in documentation are tested
- [ ] Screenshots and demos are up-to-date
- [ ] Grammar and spelling are correct
- [ ] Documentation covers all major use cases
- [ ] Installation instructions work on clean systems

## Post-Completion Tasks
- [ ] Merge feature branch to main after thorough review
- [ ] Delete feature branch and cleanup temporary artifacts
- [ ] Tag release version following semantic versioning
- [ ] Announce completion to community and stakeholders
- [ ] Monitor for issues and feedback from early adopters
- [ ] Plan next iteration or maintenance cycle

## Documentation Standards
- Use consistent markdown formatting across all files
- Include code examples for all major features
- Provide both quick-start and comprehensive guides
- Keep language clear and accessible to new contributors
- Include troubleshooting sections for common issues
- Use diagrams and visuals where helpful
- Maintain up-to-date table of contents for long documents

## Reference Materials
- [GitHub documentation best practices](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions)
- [Open source documentation guide](https://opensource.guide/docs/)
- [Technical writing style guide](https://developers.google.com/style)
- [API documentation examples](https://github.com/microsoft/api-guidelines)