---
description: Guidelines for iterative delivery from feature branches to main
globs: [".github/workflows/*.{yml,yaml}", "scripts/*.{sh,js}", "package.json"]
---

# Iterative Delivery Process Guidelines

## Feature Branch to Main Workflow

The process for delivering features from the `publishing` branch to `main` follows this iterative cycle:

```mermaid
graph TD
    A[Feature Development] --> B[Clean]
    B --> C[Build]
    C --> D[Publish]
    D --> E[Verify Installation]
    E --> F{Tests Pass?}
    F -->|Yes| G[Merge to Main]
    F -->|No| H[Fix Issues]
    H --> B
    G --> I[Next Feature]
    I --> A
```

## Command Sequence

For each feature, execute this exact sequence of commands:

```bash
# Step 1: Build and publish
npm run clean
npm run build
npm publish

# Step 2: Verify installation
rm -rf /home/sparrow/.nvm/versions/node/v23.7.0/lib/node_modules/@sparesparrow/mcp-prompts/
npm install -g @sparesparrow/mcp-prompts
npx -y @sparesparrow/mcp-prompts

# Step 3: If successful, merge to main
git checkout main
git merge publishing
git push origin main
```

## Issue Resolution Strategy

If any step fails:

1. Diagnose the issue
2. Fix in the feature branch
3. Restart the process from the clean step
4. Only proceed to the next feature after successful validation

## Feature Branch Management

1. Keep feature branches focused on single responsibilities
2. Consider feature flags for larger changes
3. Document each feature's validation process

## Feature Validation Criteria

A feature is considered ready for delivery when:

- All tests pass
- Package builds without errors
- Installation from npm works correctly
- Functionality works as expected
- Documentation is updated

## Rollback Procedure

If issues are discovered after merging to main:

```bash
# Step 1: Revert the problematic commit
git checkout main
git revert <commit-hash>

# Step 2: Publish a fixed version
npm version patch
npm run clean
npm run build
npm publish

# Step 3: Verify the fix
npm install -g @sparesparrow/mcp-prompts@latest
npx -y @sparesparrow/mcp-prompts
```

## Example Feature Delivery Checklist

For the PostgreSQL storage adapter:

1. Implement adapter class
2. Add unit tests
3. Update factory function
4. Update configuration handling
5. Add documentation
6. Build and publish
7. Verify installation
8. Merge to main

## Continuous Integration Requirements

The CI pipeline should automate this process:

```yaml
# .github/workflows/delivery.yml
name: Feature Delivery
on:
  push:
    branches: [publishing]
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run clean
      - run: npm run build
      - run: npm run test
      # Further validation steps...
```

## Version Control Commit Standards

Commits should follow conventional commits format:

- `feat:` for new features
- `fix:` for bug fixes
- `chore:` for maintenance tasks
- `docs:` for documentation updates
- `test:` for test updates
- `refactor:` for code changes that neither fix bugs nor add features 